/* Auto-generated by genmsg_cpp for file /home/thalassa/dwhitney/catkin_ws/src/rost-ros/rost_common/srv/GetTopicModel.srv */
#ifndef ROST_COMMON_SERVICE_GETTOPICMODEL_H
#define ROST_COMMON_SERVICE_GETTOPICMODEL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "rost_common/TopicModel.h"

namespace rost_common
{
template <class ContainerAllocator>
struct GetTopicModelRequest_ {
  typedef GetTopicModelRequest_<ContainerAllocator> Type;

  GetTopicModelRequest_()
  {
  }

  GetTopicModelRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::rost_common::GetTopicModelRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rost_common::GetTopicModelRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetTopicModelRequest
typedef  ::rost_common::GetTopicModelRequest_<std::allocator<void> > GetTopicModelRequest;

typedef boost::shared_ptr< ::rost_common::GetTopicModelRequest> GetTopicModelRequestPtr;
typedef boost::shared_ptr< ::rost_common::GetTopicModelRequest const> GetTopicModelRequestConstPtr;


template <class ContainerAllocator>
struct GetTopicModelResponse_ {
  typedef GetTopicModelResponse_<ContainerAllocator> Type;

  GetTopicModelResponse_()
  : topic_model()
  {
  }

  GetTopicModelResponse_(const ContainerAllocator& _alloc)
  : topic_model(_alloc)
  {
  }

  typedef  ::rost_common::TopicModel_<ContainerAllocator>  _topic_model_type;
   ::rost_common::TopicModel_<ContainerAllocator>  topic_model;


  typedef boost::shared_ptr< ::rost_common::GetTopicModelResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rost_common::GetTopicModelResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetTopicModelResponse
typedef  ::rost_common::GetTopicModelResponse_<std::allocator<void> > GetTopicModelResponse;

typedef boost::shared_ptr< ::rost_common::GetTopicModelResponse> GetTopicModelResponsePtr;
typedef boost::shared_ptr< ::rost_common::GetTopicModelResponse const> GetTopicModelResponseConstPtr;

struct GetTopicModel
{

typedef GetTopicModelRequest Request;
typedef GetTopicModelResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetTopicModel
} // namespace rost_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rost_common::GetTopicModelRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rost_common::GetTopicModelRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rost_common::GetTopicModelRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::rost_common::GetTopicModelRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::rost_common::GetTopicModelRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rost_common/GetTopicModelRequest";
  }

  static const char* value(const  ::rost_common::GetTopicModelRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rost_common::GetTopicModelRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::rost_common::GetTopicModelRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rost_common::GetTopicModelRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rost_common::GetTopicModelResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rost_common::GetTopicModelResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rost_common::GetTopicModelResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "187db3e9f87357c36b07f58f4995b9b5";
  }

  static const char* value(const  ::rost_common::GetTopicModelResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x187db3e9f87357c3ULL;
  static const uint64_t static_value2 = 0x6b07f58f4995b9b5ULL;
};

template<class ContainerAllocator>
struct DataType< ::rost_common::GetTopicModelResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rost_common/GetTopicModelResponse";
  }

  static const char* value(const  ::rost_common::GetTopicModelResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rost_common::GetTopicModelResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "TopicModel topic_model\n\
\n\
\n\
================================================================================\n\
MSG: rost_common/TopicModel\n\
#number of topics\n\
int32 K\n\
\n\
#number of vocabulary words\n\
int32 V\n\
\n\
#Dirichlet prior topic distribution in a cell\n\
float32 alpha\n\
\n\
#Dirichlet prior word distribution in a topic\n\
float32 beta\n\
\n\
#flattened KxV matrix which stores the word distribution for each topic\n\
#phi[k*V + v] is the frequency of vocabulary word <v> in topic <k>\n\
int32[] phi\n\
\n\
#topic_weights[k] is proportional to probability of seeing topic[k]\n\
int32[] topic_weights\n\
\n\
\n\
";
  }

  static const char* value(const  ::rost_common::GetTopicModelResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rost_common::GetTopicModelRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetTopicModelRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rost_common::GetTopicModelResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.topic_model);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetTopicModelResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<rost_common::GetTopicModel> {
  static const char* value() 
  {
    return "187db3e9f87357c36b07f58f4995b9b5";
  }

  static const char* value(const rost_common::GetTopicModel&) { return value(); } 
};

template<>
struct DataType<rost_common::GetTopicModel> {
  static const char* value() 
  {
    return "rost_common/GetTopicModel";
  }

  static const char* value(const rost_common::GetTopicModel&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rost_common::GetTopicModelRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "187db3e9f87357c36b07f58f4995b9b5";
  }

  static const char* value(const rost_common::GetTopicModelRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rost_common::GetTopicModelRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rost_common/GetTopicModel";
  }

  static const char* value(const rost_common::GetTopicModelRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rost_common::GetTopicModelResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "187db3e9f87357c36b07f58f4995b9b5";
  }

  static const char* value(const rost_common::GetTopicModelResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rost_common::GetTopicModelResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rost_common/GetTopicModel";
  }

  static const char* value(const rost_common::GetTopicModelResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROST_COMMON_SERVICE_GETTOPICMODEL_H

