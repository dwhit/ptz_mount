/* Auto-generated by genmsg_cpp for file /home/thalassa/dwhitney/catkin_ws/src/rost-ros/rost_common/srv/SaveFile.srv */
#ifndef ROST_COMMON_SERVICE_SAVEFILE_H
#define ROST_COMMON_SERVICE_SAVEFILE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace rost_common
{
template <class ContainerAllocator>
struct SaveFileRequest_ {
  typedef SaveFileRequest_<ContainerAllocator> Type;

  SaveFileRequest_()
  : filename()
  {
  }

  SaveFileRequest_(const ContainerAllocator& _alloc)
  : filename(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _filename_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  filename;


  typedef boost::shared_ptr< ::rost_common::SaveFileRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rost_common::SaveFileRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SaveFileRequest
typedef  ::rost_common::SaveFileRequest_<std::allocator<void> > SaveFileRequest;

typedef boost::shared_ptr< ::rost_common::SaveFileRequest> SaveFileRequestPtr;
typedef boost::shared_ptr< ::rost_common::SaveFileRequest const> SaveFileRequestConstPtr;


template <class ContainerAllocator>
struct SaveFileResponse_ {
  typedef SaveFileResponse_<ContainerAllocator> Type;

  SaveFileResponse_()
  {
  }

  SaveFileResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::rost_common::SaveFileResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rost_common::SaveFileResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SaveFileResponse
typedef  ::rost_common::SaveFileResponse_<std::allocator<void> > SaveFileResponse;

typedef boost::shared_ptr< ::rost_common::SaveFileResponse> SaveFileResponsePtr;
typedef boost::shared_ptr< ::rost_common::SaveFileResponse const> SaveFileResponseConstPtr;

struct SaveFile
{

typedef SaveFileRequest Request;
typedef SaveFileResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SaveFile
} // namespace rost_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rost_common::SaveFileRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rost_common::SaveFileRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rost_common::SaveFileRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "030824f52a0628ead956fb9d67e66ae9";
  }

  static const char* value(const  ::rost_common::SaveFileRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x030824f52a0628eaULL;
  static const uint64_t static_value2 = 0xd956fb9d67e66ae9ULL;
};

template<class ContainerAllocator>
struct DataType< ::rost_common::SaveFileRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rost_common/SaveFileRequest";
  }

  static const char* value(const  ::rost_common::SaveFileRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rost_common::SaveFileRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string filename\n\
\n\
";
  }

  static const char* value(const  ::rost_common::SaveFileRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rost_common::SaveFileResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rost_common::SaveFileResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rost_common::SaveFileResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::rost_common::SaveFileResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::rost_common::SaveFileResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rost_common/SaveFileResponse";
  }

  static const char* value(const  ::rost_common::SaveFileResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rost_common::SaveFileResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::rost_common::SaveFileResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rost_common::SaveFileResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rost_common::SaveFileRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.filename);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SaveFileRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rost_common::SaveFileResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SaveFileResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<rost_common::SaveFile> {
  static const char* value() 
  {
    return "030824f52a0628ead956fb9d67e66ae9";
  }

  static const char* value(const rost_common::SaveFile&) { return value(); } 
};

template<>
struct DataType<rost_common::SaveFile> {
  static const char* value() 
  {
    return "rost_common/SaveFile";
  }

  static const char* value(const rost_common::SaveFile&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rost_common::SaveFileRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "030824f52a0628ead956fb9d67e66ae9";
  }

  static const char* value(const rost_common::SaveFileRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rost_common::SaveFileRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rost_common/SaveFile";
  }

  static const char* value(const rost_common::SaveFileRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rost_common::SaveFileResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "030824f52a0628ead956fb9d67e66ae9";
  }

  static const char* value(const rost_common::SaveFileResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rost_common::SaveFileResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rost_common/SaveFile";
  }

  static const char* value(const rost_common::SaveFileResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROST_COMMON_SERVICE_SAVEFILE_H

