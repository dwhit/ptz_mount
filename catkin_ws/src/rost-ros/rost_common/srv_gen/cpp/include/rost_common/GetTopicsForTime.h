/* Auto-generated by genmsg_cpp for file /home/thalassa/dwhitney/catkin_ws/src/rost-ros/rost_common/srv/GetTopicsForTime.srv */
#ifndef ROST_COMMON_SERVICE_GETTOPICSFORTIME_H
#define ROST_COMMON_SERVICE_GETTOPICSFORTIME_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace rost_common
{
template <class ContainerAllocator>
struct GetTopicsForTimeRequest_ {
  typedef GetTopicsForTimeRequest_<ContainerAllocator> Type;

  GetTopicsForTimeRequest_()
  : seq(0)
  {
  }

  GetTopicsForTimeRequest_(const ContainerAllocator& _alloc)
  : seq(0)
  {
  }

  typedef int32_t _seq_type;
  int32_t seq;


  typedef boost::shared_ptr< ::rost_common::GetTopicsForTimeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rost_common::GetTopicsForTimeRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetTopicsForTimeRequest
typedef  ::rost_common::GetTopicsForTimeRequest_<std::allocator<void> > GetTopicsForTimeRequest;

typedef boost::shared_ptr< ::rost_common::GetTopicsForTimeRequest> GetTopicsForTimeRequestPtr;
typedef boost::shared_ptr< ::rost_common::GetTopicsForTimeRequest const> GetTopicsForTimeRequestConstPtr;


template <class ContainerAllocator>
struct GetTopicsForTimeResponse_ {
  typedef GetTopicsForTimeResponse_<ContainerAllocator> Type;

  GetTopicsForTimeResponse_()
  : topics()
  , K(0)
  , perplexity(0.0)
  {
  }

  GetTopicsForTimeResponse_(const ContainerAllocator& _alloc)
  : topics(_alloc)
  , K(0)
  , perplexity(0.0)
  {
  }

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _topics_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  topics;

  typedef int32_t _K_type;
  int32_t K;

  typedef double _perplexity_type;
  double perplexity;


  typedef boost::shared_ptr< ::rost_common::GetTopicsForTimeResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rost_common::GetTopicsForTimeResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetTopicsForTimeResponse
typedef  ::rost_common::GetTopicsForTimeResponse_<std::allocator<void> > GetTopicsForTimeResponse;

typedef boost::shared_ptr< ::rost_common::GetTopicsForTimeResponse> GetTopicsForTimeResponsePtr;
typedef boost::shared_ptr< ::rost_common::GetTopicsForTimeResponse const> GetTopicsForTimeResponseConstPtr;

struct GetTopicsForTime
{

typedef GetTopicsForTimeRequest Request;
typedef GetTopicsForTimeResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetTopicsForTime
} // namespace rost_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rost_common::GetTopicsForTimeRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rost_common::GetTopicsForTimeRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rost_common::GetTopicsForTimeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "08efbcbe4da8ee568afe5f980fbc9b5c";
  }

  static const char* value(const  ::rost_common::GetTopicsForTimeRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x08efbcbe4da8ee56ULL;
  static const uint64_t static_value2 = 0x8afe5f980fbc9b5cULL;
};

template<class ContainerAllocator>
struct DataType< ::rost_common::GetTopicsForTimeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rost_common/GetTopicsForTimeRequest";
  }

  static const char* value(const  ::rost_common::GetTopicsForTimeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rost_common::GetTopicsForTimeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 seq\n\
\n\
";
  }

  static const char* value(const  ::rost_common::GetTopicsForTimeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rost_common::GetTopicsForTimeRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rost_common::GetTopicsForTimeResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rost_common::GetTopicsForTimeResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rost_common::GetTopicsForTimeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3670de6f3f3c7e018fed03796fe3a804";
  }

  static const char* value(const  ::rost_common::GetTopicsForTimeResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3670de6f3f3c7e01ULL;
  static const uint64_t static_value2 = 0x8fed03796fe3a804ULL;
};

template<class ContainerAllocator>
struct DataType< ::rost_common::GetTopicsForTimeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rost_common/GetTopicsForTimeResponse";
  }

  static const char* value(const  ::rost_common::GetTopicsForTimeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rost_common::GetTopicsForTimeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32[] topics\n\
int32 K\n\
float64 perplexity\n\
\n\
\n\
";
  }

  static const char* value(const  ::rost_common::GetTopicsForTimeResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rost_common::GetTopicsForTimeRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.seq);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetTopicsForTimeRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rost_common::GetTopicsForTimeResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.topics);
    stream.next(m.K);
    stream.next(m.perplexity);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetTopicsForTimeResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<rost_common::GetTopicsForTime> {
  static const char* value() 
  {
    return "1eaec8a97e83f1417c95c1373bd1c6a5";
  }

  static const char* value(const rost_common::GetTopicsForTime&) { return value(); } 
};

template<>
struct DataType<rost_common::GetTopicsForTime> {
  static const char* value() 
  {
    return "rost_common/GetTopicsForTime";
  }

  static const char* value(const rost_common::GetTopicsForTime&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rost_common::GetTopicsForTimeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1eaec8a97e83f1417c95c1373bd1c6a5";
  }

  static const char* value(const rost_common::GetTopicsForTimeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rost_common::GetTopicsForTimeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rost_common/GetTopicsForTime";
  }

  static const char* value(const rost_common::GetTopicsForTimeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rost_common::GetTopicsForTimeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1eaec8a97e83f1417c95c1373bd1c6a5";
  }

  static const char* value(const rost_common::GetTopicsForTimeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rost_common::GetTopicsForTimeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rost_common/GetTopicsForTime";
  }

  static const char* value(const rost_common::GetTopicsForTimeResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROST_COMMON_SERVICE_GETTOPICSFORTIME_H

