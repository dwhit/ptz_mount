/* Auto-generated by genmsg_cpp for file /home/thalassa/dwhitney/catkin_ws/src/rost-ros/rost_common/srv/RefineTopics.srv */
#ifndef ROST_COMMON_SERVICE_REFINETOPICS_H
#define ROST_COMMON_SERVICE_REFINETOPICS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace rost_common
{
template <class ContainerAllocator>
struct RefineTopicsRequest_ {
  typedef RefineTopicsRequest_<ContainerAllocator> Type;

  RefineTopicsRequest_()
  : iterations(0)
  {
  }

  RefineTopicsRequest_(const ContainerAllocator& _alloc)
  : iterations(0)
  {
  }

  typedef uint32_t _iterations_type;
  uint32_t iterations;


  typedef boost::shared_ptr< ::rost_common::RefineTopicsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rost_common::RefineTopicsRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RefineTopicsRequest
typedef  ::rost_common::RefineTopicsRequest_<std::allocator<void> > RefineTopicsRequest;

typedef boost::shared_ptr< ::rost_common::RefineTopicsRequest> RefineTopicsRequestPtr;
typedef boost::shared_ptr< ::rost_common::RefineTopicsRequest const> RefineTopicsRequestConstPtr;


template <class ContainerAllocator>
struct RefineTopicsResponse_ {
  typedef RefineTopicsResponse_<ContainerAllocator> Type;

  RefineTopicsResponse_()
  {
  }

  RefineTopicsResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::rost_common::RefineTopicsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rost_common::RefineTopicsResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RefineTopicsResponse
typedef  ::rost_common::RefineTopicsResponse_<std::allocator<void> > RefineTopicsResponse;

typedef boost::shared_ptr< ::rost_common::RefineTopicsResponse> RefineTopicsResponsePtr;
typedef boost::shared_ptr< ::rost_common::RefineTopicsResponse const> RefineTopicsResponseConstPtr;

struct RefineTopics
{

typedef RefineTopicsRequest Request;
typedef RefineTopicsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct RefineTopics
} // namespace rost_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rost_common::RefineTopicsRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rost_common::RefineTopicsRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rost_common::RefineTopicsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d5f72bf6b4d73bc8d69730aaaf1b5f62";
  }

  static const char* value(const  ::rost_common::RefineTopicsRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd5f72bf6b4d73bc8ULL;
  static const uint64_t static_value2 = 0xd69730aaaf1b5f62ULL;
};

template<class ContainerAllocator>
struct DataType< ::rost_common::RefineTopicsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rost_common/RefineTopicsRequest";
  }

  static const char* value(const  ::rost_common::RefineTopicsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rost_common::RefineTopicsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32 iterations\n\
\n\
";
  }

  static const char* value(const  ::rost_common::RefineTopicsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rost_common::RefineTopicsRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rost_common::RefineTopicsResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rost_common::RefineTopicsResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rost_common::RefineTopicsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::rost_common::RefineTopicsResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::rost_common::RefineTopicsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rost_common/RefineTopicsResponse";
  }

  static const char* value(const  ::rost_common::RefineTopicsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rost_common::RefineTopicsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::rost_common::RefineTopicsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rost_common::RefineTopicsResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rost_common::RefineTopicsRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.iterations);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RefineTopicsRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rost_common::RefineTopicsResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RefineTopicsResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<rost_common::RefineTopics> {
  static const char* value() 
  {
    return "d5f72bf6b4d73bc8d69730aaaf1b5f62";
  }

  static const char* value(const rost_common::RefineTopics&) { return value(); } 
};

template<>
struct DataType<rost_common::RefineTopics> {
  static const char* value() 
  {
    return "rost_common/RefineTopics";
  }

  static const char* value(const rost_common::RefineTopics&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rost_common::RefineTopicsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d5f72bf6b4d73bc8d69730aaaf1b5f62";
  }

  static const char* value(const rost_common::RefineTopicsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rost_common::RefineTopicsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rost_common/RefineTopics";
  }

  static const char* value(const rost_common::RefineTopicsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<rost_common::RefineTopicsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d5f72bf6b4d73bc8d69730aaaf1b5f62";
  }

  static const char* value(const rost_common::RefineTopicsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<rost_common::RefineTopicsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rost_common/RefineTopics";
  }

  static const char* value(const rost_common::RefineTopicsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ROST_COMMON_SERVICE_REFINETOPICS_H

