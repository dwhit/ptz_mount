/* Auto-generated by genmsg_cpp for file /home/thalassa/dwhitney/catkin_ws/src/rost-ros/rost_common/msg/WordObservation.msg */
#ifndef ROST_COMMON_MESSAGE_WORDOBSERVATION_H
#define ROST_COMMON_MESSAGE_WORDOBSERVATION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace rost_common
{
template <class ContainerAllocator>
struct WordObservation_ {
  typedef WordObservation_<ContainerAllocator> Type;

  WordObservation_()
  : header()
  , seq(0)
  , source()
  , observation_pose()
  , words()
  , word_pose()
  , word_scale()
  , vocabulary_begin(0)
  , vocabulary_size(0)
  {
  }

  WordObservation_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , seq(0)
  , source(_alloc)
  , observation_pose(_alloc)
  , words(_alloc)
  , word_pose(_alloc)
  , word_scale(_alloc)
  , vocabulary_begin(0)
  , vocabulary_size(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint32_t _seq_type;
  uint32_t seq;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _source_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  source;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _observation_pose_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  observation_pose;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _words_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  words;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _word_pose_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  word_pose;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _word_scale_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  word_scale;

  typedef int32_t _vocabulary_begin_type;
  int32_t vocabulary_begin;

  typedef int32_t _vocabulary_size_type;
  int32_t vocabulary_size;


  typedef boost::shared_ptr< ::rost_common::WordObservation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rost_common::WordObservation_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct WordObservation
typedef  ::rost_common::WordObservation_<std::allocator<void> > WordObservation;

typedef boost::shared_ptr< ::rost_common::WordObservation> WordObservationPtr;
typedef boost::shared_ptr< ::rost_common::WordObservation const> WordObservationConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rost_common::WordObservation_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rost_common::WordObservation_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rost_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rost_common::WordObservation_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rost_common::WordObservation_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rost_common::WordObservation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fb89b7a572263ab855cc561dcf6039f1";
  }

  static const char* value(const  ::rost_common::WordObservation_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfb89b7a572263ab8ULL;
  static const uint64_t static_value2 = 0x55cc561dcf6039f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::rost_common::WordObservation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rost_common/WordObservation";
  }

  static const char* value(const  ::rost_common::WordObservation_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rost_common::WordObservation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
\n\
uint32 seq\n\
\n\
#what kind of observations?\n\
string source\n\
\n\
#where was observations made\n\
int32[] observation_pose\n\
\n\
#list of words observed\n\
int32[] words\n\
\n\
#local position of each word\n\
int32[] word_pose\n\
\n\
#local position of each word\n\
int32[] word_scale\n\
\n\
#words are in the range [vocabulary_begin, vocabulary_begin + vocabulary_size)\n\
int32 vocabulary_begin\n\
int32 vocabulary_size\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::rost_common::WordObservation_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::rost_common::WordObservation_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::rost_common::WordObservation_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rost_common::WordObservation_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.seq);
    stream.next(m.source);
    stream.next(m.observation_pose);
    stream.next(m.words);
    stream.next(m.word_pose);
    stream.next(m.word_scale);
    stream.next(m.vocabulary_begin);
    stream.next(m.vocabulary_size);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct WordObservation_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rost_common::WordObservation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rost_common::WordObservation_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "source: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.source);
    s << indent << "observation_pose[]" << std::endl;
    for (size_t i = 0; i < v.observation_pose.size(); ++i)
    {
      s << indent << "  observation_pose[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.observation_pose[i]);
    }
    s << indent << "words[]" << std::endl;
    for (size_t i = 0; i < v.words.size(); ++i)
    {
      s << indent << "  words[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.words[i]);
    }
    s << indent << "word_pose[]" << std::endl;
    for (size_t i = 0; i < v.word_pose.size(); ++i)
    {
      s << indent << "  word_pose[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.word_pose[i]);
    }
    s << indent << "word_scale[]" << std::endl;
    for (size_t i = 0; i < v.word_scale.size(); ++i)
    {
      s << indent << "  word_scale[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.word_scale[i]);
    }
    s << indent << "vocabulary_begin: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vocabulary_begin);
    s << indent << "vocabulary_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vocabulary_size);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROST_COMMON_MESSAGE_WORDOBSERVATION_H

