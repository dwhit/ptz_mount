/* Auto-generated by genmsg_cpp for file /home/thalassa/dwhitney/catkin_ws/src/rost-ros/rost_common/msg/Summary.msg */
#ifndef ROST_COMMON_MESSAGE_SUMMARY_H
#define ROST_COMMON_MESSAGE_SUMMARY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace rost_common
{
template <class ContainerAllocator>
struct Summary_ {
  typedef Summary_<ContainerAllocator> Type;

  Summary_()
  : header()
  , seq(0)
  , summary()
  , summary_surprise()
  , surprise(0.0)
  , threshold(0.0)
  , closest_seq(0)
  {
  }

  Summary_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , seq(0)
  , summary(_alloc)
  , summary_surprise(_alloc)
  , surprise(0.0)
  , threshold(0.0)
  , closest_seq(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef int32_t _seq_type;
  int32_t seq;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _summary_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  summary;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _summary_surprise_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  summary_surprise;

  typedef float _surprise_type;
  float surprise;

  typedef float _threshold_type;
  float threshold;

  typedef int32_t _closest_seq_type;
  int32_t closest_seq;


  typedef boost::shared_ptr< ::rost_common::Summary_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rost_common::Summary_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Summary
typedef  ::rost_common::Summary_<std::allocator<void> > Summary;

typedef boost::shared_ptr< ::rost_common::Summary> SummaryPtr;
typedef boost::shared_ptr< ::rost_common::Summary const> SummaryConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rost_common::Summary_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rost_common::Summary_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rost_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rost_common::Summary_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rost_common::Summary_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rost_common::Summary_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a6b3b108891ab7787304d30b0c596436";
  }

  static const char* value(const  ::rost_common::Summary_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa6b3b108891ab778ULL;
  static const uint64_t static_value2 = 0x7304d30b0c596436ULL;
};

template<class ContainerAllocator>
struct DataType< ::rost_common::Summary_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rost_common/Summary";
  }

  static const char* value(const  ::rost_common::Summary_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rost_common::Summary_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
int32 seq\n\
int32[] summary\n\
float32[] summary_surprise\n\
float32 surprise\n\
float32 threshold\n\
int32 closest_seq\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::rost_common::Summary_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::rost_common::Summary_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::rost_common::Summary_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rost_common::Summary_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.seq);
    stream.next(m.summary);
    stream.next(m.summary_surprise);
    stream.next(m.surprise);
    stream.next(m.threshold);
    stream.next(m.closest_seq);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Summary_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rost_common::Summary_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rost_common::Summary_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "seq: ";
    Printer<int32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "summary[]" << std::endl;
    for (size_t i = 0; i < v.summary.size(); ++i)
    {
      s << indent << "  summary[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.summary[i]);
    }
    s << indent << "summary_surprise[]" << std::endl;
    for (size_t i = 0; i < v.summary_surprise.size(); ++i)
    {
      s << indent << "  summary_surprise[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.summary_surprise[i]);
    }
    s << indent << "surprise: ";
    Printer<float>::stream(s, indent + "  ", v.surprise);
    s << indent << "threshold: ";
    Printer<float>::stream(s, indent + "  ", v.threshold);
    s << indent << "closest_seq: ";
    Printer<int32_t>::stream(s, indent + "  ", v.closest_seq);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROST_COMMON_MESSAGE_SUMMARY_H

