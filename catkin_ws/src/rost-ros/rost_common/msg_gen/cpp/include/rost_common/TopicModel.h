/* Auto-generated by genmsg_cpp for file /home/thalassa/dwhitney/catkin_ws/src/rost-ros/rost_common/msg/TopicModel.msg */
#ifndef ROST_COMMON_MESSAGE_TOPICMODEL_H
#define ROST_COMMON_MESSAGE_TOPICMODEL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rost_common
{
template <class ContainerAllocator>
struct TopicModel_ {
  typedef TopicModel_<ContainerAllocator> Type;

  TopicModel_()
  : K(0)
  , V(0)
  , alpha(0.0)
  , beta(0.0)
  , phi()
  , topic_weights()
  {
  }

  TopicModel_(const ContainerAllocator& _alloc)
  : K(0)
  , V(0)
  , alpha(0.0)
  , beta(0.0)
  , phi(_alloc)
  , topic_weights(_alloc)
  {
  }

  typedef int32_t _K_type;
  int32_t K;

  typedef int32_t _V_type;
  int32_t V;

  typedef float _alpha_type;
  float alpha;

  typedef float _beta_type;
  float beta;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _phi_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  phi;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _topic_weights_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  topic_weights;


  typedef boost::shared_ptr< ::rost_common::TopicModel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rost_common::TopicModel_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct TopicModel
typedef  ::rost_common::TopicModel_<std::allocator<void> > TopicModel;

typedef boost::shared_ptr< ::rost_common::TopicModel> TopicModelPtr;
typedef boost::shared_ptr< ::rost_common::TopicModel const> TopicModelConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rost_common::TopicModel_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rost_common::TopicModel_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rost_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rost_common::TopicModel_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rost_common::TopicModel_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rost_common::TopicModel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "142de4769101bf71c78699838d38dcfe";
  }

  static const char* value(const  ::rost_common::TopicModel_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x142de4769101bf71ULL;
  static const uint64_t static_value2 = 0xc78699838d38dcfeULL;
};

template<class ContainerAllocator>
struct DataType< ::rost_common::TopicModel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rost_common/TopicModel";
  }

  static const char* value(const  ::rost_common::TopicModel_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rost_common::TopicModel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#number of topics\n\
int32 K\n\
\n\
#number of vocabulary words\n\
int32 V\n\
\n\
#Dirichlet prior topic distribution in a cell\n\
float32 alpha\n\
\n\
#Dirichlet prior word distribution in a topic\n\
float32 beta\n\
\n\
#flattened KxV matrix which stores the word distribution for each topic\n\
#phi[k*V + v] is the frequency of vocabulary word <v> in topic <k>\n\
int32[] phi\n\
\n\
#topic_weights[k] is proportional to probability of seeing topic[k]\n\
int32[] topic_weights\n\
\n\
\n\
";
  }

  static const char* value(const  ::rost_common::TopicModel_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rost_common::TopicModel_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.K);
    stream.next(m.V);
    stream.next(m.alpha);
    stream.next(m.beta);
    stream.next(m.phi);
    stream.next(m.topic_weights);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TopicModel_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rost_common::TopicModel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rost_common::TopicModel_<ContainerAllocator> & v) 
  {
    s << indent << "K: ";
    Printer<int32_t>::stream(s, indent + "  ", v.K);
    s << indent << "V: ";
    Printer<int32_t>::stream(s, indent + "  ", v.V);
    s << indent << "alpha: ";
    Printer<float>::stream(s, indent + "  ", v.alpha);
    s << indent << "beta: ";
    Printer<float>::stream(s, indent + "  ", v.beta);
    s << indent << "phi[]" << std::endl;
    for (size_t i = 0; i < v.phi.size(); ++i)
    {
      s << indent << "  phi[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.phi[i]);
    }
    s << indent << "topic_weights[]" << std::endl;
    for (size_t i = 0; i < v.topic_weights.size(); ++i)
    {
      s << indent << "  topic_weights[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.topic_weights[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROST_COMMON_MESSAGE_TOPICMODEL_H

