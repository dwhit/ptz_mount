/* Auto-generated by genmsg_cpp for file /home/thalassa/dwhitney/catkin_ws/src/rost-ros/rost_common/msg/SummaryObservations.msg */
#ifndef ROST_COMMON_MESSAGE_SUMMARYOBSERVATIONS_H
#define ROST_COMMON_MESSAGE_SUMMARYOBSERVATIONS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "rost_common/WordObservation.h"

namespace rost_common
{
template <class ContainerAllocator>
struct SummaryObservations_ {
  typedef SummaryObservations_<ContainerAllocator> Type;

  SummaryObservations_()
  : summary()
  {
  }

  SummaryObservations_(const ContainerAllocator& _alloc)
  : summary(_alloc)
  {
  }

  typedef std::vector< ::rost_common::WordObservation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rost_common::WordObservation_<ContainerAllocator> >::other >  _summary_type;
  std::vector< ::rost_common::WordObservation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rost_common::WordObservation_<ContainerAllocator> >::other >  summary;


  typedef boost::shared_ptr< ::rost_common::SummaryObservations_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rost_common::SummaryObservations_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SummaryObservations
typedef  ::rost_common::SummaryObservations_<std::allocator<void> > SummaryObservations;

typedef boost::shared_ptr< ::rost_common::SummaryObservations> SummaryObservationsPtr;
typedef boost::shared_ptr< ::rost_common::SummaryObservations const> SummaryObservationsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rost_common::SummaryObservations_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rost_common::SummaryObservations_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rost_common

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rost_common::SummaryObservations_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rost_common::SummaryObservations_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rost_common::SummaryObservations_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d94fb3c1538a3c0caa2b8d8e30cdb115";
  }

  static const char* value(const  ::rost_common::SummaryObservations_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd94fb3c1538a3c0cULL;
  static const uint64_t static_value2 = 0xaa2b8d8e30cdb115ULL;
};

template<class ContainerAllocator>
struct DataType< ::rost_common::SummaryObservations_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rost_common/SummaryObservations";
  }

  static const char* value(const  ::rost_common::SummaryObservations_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rost_common::SummaryObservations_<ContainerAllocator> > {
  static const char* value() 
  {
    return "WordObservation[] summary\n\
================================================================================\n\
MSG: rost_common/WordObservation\n\
Header header\n\
\n\
uint32 seq\n\
\n\
#what kind of observations?\n\
string source\n\
\n\
#where was observations made\n\
int32[] observation_pose\n\
\n\
#list of words observed\n\
int32[] words\n\
\n\
#local position of each word\n\
int32[] word_pose\n\
\n\
#local position of each word\n\
int32[] word_scale\n\
\n\
#words are in the range [vocabulary_begin, vocabulary_begin + vocabulary_size)\n\
int32 vocabulary_begin\n\
int32 vocabulary_size\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::rost_common::SummaryObservations_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rost_common::SummaryObservations_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.summary);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SummaryObservations_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rost_common::SummaryObservations_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rost_common::SummaryObservations_<ContainerAllocator> & v) 
  {
    s << indent << "summary[]" << std::endl;
    for (size_t i = 0; i < v.summary.size(); ++i)
    {
      s << indent << "  summary[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rost_common::WordObservation_<ContainerAllocator> >::stream(s, indent + "    ", v.summary[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ROST_COMMON_MESSAGE_SUMMARYOBSERVATIONS_H

