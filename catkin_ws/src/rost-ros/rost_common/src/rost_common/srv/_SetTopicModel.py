"""autogenerated by genpy from rost_common/SetTopicModelRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rost_common.msg

class SetTopicModelRequest(genpy.Message):
  _md5sum = "187db3e9f87357c36b07f58f4995b9b5"
  _type = "rost_common/SetTopicModelRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """TopicModel topic_model

================================================================================
MSG: rost_common/TopicModel
#number of topics
int32 K

#number of vocabulary words
int32 V

#Dirichlet prior topic distribution in a cell
float32 alpha

#Dirichlet prior word distribution in a topic
float32 beta

#flattened KxV matrix which stores the word distribution for each topic
#phi[k*V + v] is the frequency of vocabulary word <v> in topic <k>
int32[] phi

#topic_weights[k] is proportional to probability of seeing topic[k]
int32[] topic_weights


"""
  __slots__ = ['topic_model']
  _slot_types = ['rost_common/TopicModel']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       topic_model

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetTopicModelRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.topic_model is None:
        self.topic_model = rost_common.msg.TopicModel()
    else:
      self.topic_model = rost_common.msg.TopicModel()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2i2f.pack(_x.topic_model.K, _x.topic_model.V, _x.topic_model.alpha, _x.topic_model.beta))
      length = len(self.topic_model.phi)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.topic_model.phi))
      length = len(self.topic_model.topic_weights)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.topic_model.topic_weights))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.topic_model is None:
        self.topic_model = rost_common.msg.TopicModel()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.topic_model.K, _x.topic_model.V, _x.topic_model.alpha, _x.topic_model.beta,) = _struct_2i2f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.topic_model.phi = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.topic_model.topic_weights = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2i2f.pack(_x.topic_model.K, _x.topic_model.V, _x.topic_model.alpha, _x.topic_model.beta))
      length = len(self.topic_model.phi)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.topic_model.phi.tostring())
      length = len(self.topic_model.topic_weights)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.topic_model.topic_weights.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.topic_model is None:
        self.topic_model = rost_common.msg.TopicModel()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.topic_model.K, _x.topic_model.V, _x.topic_model.alpha, _x.topic_model.beta,) = _struct_2i2f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.topic_model.phi = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.topic_model.topic_weights = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2i2f = struct.Struct("<2i2f")
"""autogenerated by genpy from rost_common/SetTopicModelResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetTopicModelResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "rost_common/SetTopicModelResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetTopicModelResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
class SetTopicModel(object):
  _type          = 'rost_common/SetTopicModel'
  _md5sum = '187db3e9f87357c36b07f58f4995b9b5'
  _request_class  = SetTopicModelRequest
  _response_class = SetTopicModelResponse
