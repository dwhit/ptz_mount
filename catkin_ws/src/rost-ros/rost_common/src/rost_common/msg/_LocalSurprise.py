"""autogenerated by genpy from rost_common/LocalSurprise.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LocalSurprise(genpy.Message):
  _md5sum = "3c479ade3037e1ee7eec5611e587b7c7"
  _type = "rost_common/LocalSurprise"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 seq
#int32[] centers
#int32[] radii
float32[] surprise
int32 width
int32 height
int32 cell_width
"""
  __slots__ = ['seq','surprise','width','height','cell_width']
  _slot_types = ['uint32','float32[]','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       seq,surprise,width,height,cell_width

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LocalSurprise, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.seq is None:
        self.seq = 0
      if self.surprise is None:
        self.surprise = []
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
      if self.cell_width is None:
        self.cell_width = 0
    else:
      self.seq = 0
      self.surprise = []
      self.width = 0
      self.height = 0
      self.cell_width = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_I.pack(self.seq))
      length = len(self.surprise)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.surprise))
      _x = self
      buff.write(_struct_3i.pack(_x.width, _x.height, _x.cell_width))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.seq,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.surprise = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.width, _x.height, _x.cell_width,) = _struct_3i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_I.pack(self.seq))
      length = len(self.surprise)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.surprise.tostring())
      _x = self
      buff.write(_struct_3i.pack(_x.width, _x.height, _x.cell_width))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.seq,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.surprise = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 12
      (_x.width, _x.height, _x.cell_width,) = _struct_3i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3i = struct.Struct("<3i")
