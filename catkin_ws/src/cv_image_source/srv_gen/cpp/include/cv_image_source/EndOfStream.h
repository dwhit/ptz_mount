/* Auto-generated by genmsg_cpp for file /home/thalassa/dwhitney/catkin_ws/src/cv_image_source/srv/EndOfStream.srv */
#ifndef CV_IMAGE_SOURCE_SERVICE_ENDOFSTREAM_H
#define CV_IMAGE_SOURCE_SERVICE_ENDOFSTREAM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace cv_image_source
{
template <class ContainerAllocator>
struct EndOfStreamRequest_ {
  typedef EndOfStreamRequest_<ContainerAllocator> Type;

  EndOfStreamRequest_()
  {
  }

  EndOfStreamRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::cv_image_source::EndOfStreamRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cv_image_source::EndOfStreamRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct EndOfStreamRequest
typedef  ::cv_image_source::EndOfStreamRequest_<std::allocator<void> > EndOfStreamRequest;

typedef boost::shared_ptr< ::cv_image_source::EndOfStreamRequest> EndOfStreamRequestPtr;
typedef boost::shared_ptr< ::cv_image_source::EndOfStreamRequest const> EndOfStreamRequestConstPtr;


template <class ContainerAllocator>
struct EndOfStreamResponse_ {
  typedef EndOfStreamResponse_<ContainerAllocator> Type;

  EndOfStreamResponse_()
  : end_of_stream(false)
  {
  }

  EndOfStreamResponse_(const ContainerAllocator& _alloc)
  : end_of_stream(false)
  {
  }

  typedef uint8_t _end_of_stream_type;
  uint8_t end_of_stream;


  typedef boost::shared_ptr< ::cv_image_source::EndOfStreamResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cv_image_source::EndOfStreamResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct EndOfStreamResponse
typedef  ::cv_image_source::EndOfStreamResponse_<std::allocator<void> > EndOfStreamResponse;

typedef boost::shared_ptr< ::cv_image_source::EndOfStreamResponse> EndOfStreamResponsePtr;
typedef boost::shared_ptr< ::cv_image_source::EndOfStreamResponse const> EndOfStreamResponseConstPtr;

struct EndOfStream
{

typedef EndOfStreamRequest Request;
typedef EndOfStreamResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct EndOfStream
} // namespace cv_image_source

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cv_image_source::EndOfStreamRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cv_image_source::EndOfStreamRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cv_image_source::EndOfStreamRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::cv_image_source::EndOfStreamRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::cv_image_source::EndOfStreamRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cv_image_source/EndOfStreamRequest";
  }

  static const char* value(const  ::cv_image_source::EndOfStreamRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cv_image_source::EndOfStreamRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::cv_image_source::EndOfStreamRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cv_image_source::EndOfStreamRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cv_image_source::EndOfStreamResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cv_image_source::EndOfStreamResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cv_image_source::EndOfStreamResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3e46dcd5e177477b9c16a7621127bd8b";
  }

  static const char* value(const  ::cv_image_source::EndOfStreamResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3e46dcd5e177477bULL;
  static const uint64_t static_value2 = 0x9c16a7621127bd8bULL;
};

template<class ContainerAllocator>
struct DataType< ::cv_image_source::EndOfStreamResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cv_image_source/EndOfStreamResponse";
  }

  static const char* value(const  ::cv_image_source::EndOfStreamResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cv_image_source::EndOfStreamResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool end_of_stream\n\
\n\
";
  }

  static const char* value(const  ::cv_image_source::EndOfStreamResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cv_image_source::EndOfStreamResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cv_image_source::EndOfStreamRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct EndOfStreamRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cv_image_source::EndOfStreamResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.end_of_stream);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct EndOfStreamResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<cv_image_source::EndOfStream> {
  static const char* value() 
  {
    return "3e46dcd5e177477b9c16a7621127bd8b";
  }

  static const char* value(const cv_image_source::EndOfStream&) { return value(); } 
};

template<>
struct DataType<cv_image_source::EndOfStream> {
  static const char* value() 
  {
    return "cv_image_source/EndOfStream";
  }

  static const char* value(const cv_image_source::EndOfStream&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cv_image_source::EndOfStreamRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3e46dcd5e177477b9c16a7621127bd8b";
  }

  static const char* value(const cv_image_source::EndOfStreamRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cv_image_source::EndOfStreamRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cv_image_source/EndOfStream";
  }

  static const char* value(const cv_image_source::EndOfStreamRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cv_image_source::EndOfStreamResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3e46dcd5e177477b9c16a7621127bd8b";
  }

  static const char* value(const cv_image_source::EndOfStreamResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cv_image_source::EndOfStreamResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cv_image_source/EndOfStream";
  }

  static const char* value(const cv_image_source::EndOfStreamResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CV_IMAGE_SOURCE_SERVICE_ENDOFSTREAM_H

